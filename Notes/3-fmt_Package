fmt has a broader purpose, helping us format data, which is why it’s sometimes referred to as the format package (though it’s pronounced “fumpt”, and no that’s not a typo)
In addition to Println(), there’s also Print() and Printf() each with their own variation of how to print data. 
There’s also Sprint(), Sprintln(), and Sprintf() which formats but does not print anything to the terminal. 
We can even get user input by using Scan().

With fmt.Printf(), we can interpolate strings, or leave placeholders in a string and use values to fill in the placeholders.

The first argument we provide fmt.Printf() is the string: 
    "Is %v your final answer?". The %v portion is our placeholder and is known as a verb in Go. 
    Verbs are identified by the combination of a % character followed by a letter. 
    The specific letter informs what goes fills in the placeholder, in this case, %v gets the value of "C" from our second argument, guess.
As long as we provide enough arguments, we can even add multiple placeholders.

the verb %T prints out the type of the second argument

Using %d we can interpolate a number into a string

With %f, we can limit how precise we are by including a value between the % and f like: %.2f.

fmt.Scan() expects addresses for arguments